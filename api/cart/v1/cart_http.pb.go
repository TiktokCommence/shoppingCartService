// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.21.6
// source: cart/v1/cart.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCartAddItem = "/cart.v1.Cart/AddItem"
const OperationCartClearCart = "/cart.v1.Cart/ClearCart"
const OperationCartCreateCart = "/cart.v1.Cart/CreateCart"
const OperationCartDeleteItem = "/cart.v1.Cart/DeleteItem"
const OperationCartGetCart = "/cart.v1.Cart/GetCart"
const OperationCartUpdateItem = "/cart.v1.Cart/UpdateItem"

type CartHTTPServer interface {
	AddItem(context.Context, *AddItemRequest) (*AddItemReply, error)
	ClearCart(context.Context, *ClearCartRequest) (*ClearCartReply, error)
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemReply, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartReply, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemReply, error)
}

func RegisterCartHTTPServer(s *http.Server, srv CartHTTPServer) {
	r := s.Route("/")
	r.POST("/add_commodity", _Cart_AddItem0_HTTP_Handler(srv))
	r.PUT("/update_commodity", _Cart_UpdateItem0_HTTP_Handler(srv))
	r.DELETE("/delete_commodity", _Cart_DeleteItem0_HTTP_Handler(srv))
	r.GET("/show_cart", _Cart_GetCart0_HTTP_Handler(srv))
	r.DELETE("/clear_cart", _Cart_ClearCart0_HTTP_Handler(srv))
	r.POST("/create_cart", _Cart_CreateCart0_HTTP_Handler(srv))
}

func _Cart_AddItem0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartAddItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddItem(ctx, req.(*AddItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddItemReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_UpdateItem0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartUpdateItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateItem(ctx, req.(*UpdateItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateItemReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_DeleteItem0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartDeleteItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteItem(ctx, req.(*DeleteItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteItemReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_GetCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCartRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartGetCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCart(ctx, req.(*GetCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_ClearCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClearCartRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartClearCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClearCart(ctx, req.(*ClearCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClearCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_CreateCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartCreateCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCart(ctx, req.(*CreateCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCartReply)
		return ctx.Result(200, reply)
	}
}

type CartHTTPClient interface {
	AddItem(ctx context.Context, req *AddItemRequest, opts ...http.CallOption) (rsp *AddItemReply, err error)
	ClearCart(ctx context.Context, req *ClearCartRequest, opts ...http.CallOption) (rsp *ClearCartReply, err error)
	CreateCart(ctx context.Context, req *CreateCartRequest, opts ...http.CallOption) (rsp *CreateCartReply, err error)
	DeleteItem(ctx context.Context, req *DeleteItemRequest, opts ...http.CallOption) (rsp *DeleteItemReply, err error)
	GetCart(ctx context.Context, req *GetCartRequest, opts ...http.CallOption) (rsp *GetCartReply, err error)
	UpdateItem(ctx context.Context, req *UpdateItemRequest, opts ...http.CallOption) (rsp *UpdateItemReply, err error)
}

type CartHTTPClientImpl struct {
	cc *http.Client
}

func NewCartHTTPClient(client *http.Client) CartHTTPClient {
	return &CartHTTPClientImpl{client}
}

func (c *CartHTTPClientImpl) AddItem(ctx context.Context, in *AddItemRequest, opts ...http.CallOption) (*AddItemReply, error) {
	var out AddItemReply
	pattern := "/add_commodity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartAddItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) ClearCart(ctx context.Context, in *ClearCartRequest, opts ...http.CallOption) (*ClearCartReply, error) {
	var out ClearCartReply
	pattern := "/clear_cart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartClearCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...http.CallOption) (*CreateCartReply, error) {
	var out CreateCartReply
	pattern := "/create_cart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartCreateCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...http.CallOption) (*DeleteItemReply, error) {
	var out DeleteItemReply
	pattern := "/delete_commodity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartDeleteItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) GetCart(ctx context.Context, in *GetCartRequest, opts ...http.CallOption) (*GetCartReply, error) {
	var out GetCartReply
	pattern := "/show_cart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartGetCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...http.CallOption) (*UpdateItemReply, error) {
	var out UpdateItemReply
	pattern := "/update_commodity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartUpdateItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
